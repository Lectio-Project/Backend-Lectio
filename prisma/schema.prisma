generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  email      String       @unique
  password   String
  username   String?      @unique
  bio        String?
  imageUrl   String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  UserGenres UserGender[]
  Comment    Comment[]
  UserAuthor UserAuthor[]
  UserBook   UserBook[]

  @@map("users")
}

model UserBook {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  book   Book   @relation(fields: [bookId], references: [id])
  bookId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  @@map("user_books")
}

model UserAuthor {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  author   Author @relation(fields: [authorId], references: [id])
  authorId String @db.ObjectId
  user     User   @relation(fields: [userId], references: [id])
  userId   String @db.ObjectId

  @@map("user_authors")
}

model UserGender {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  gender   Gender @relation(fields: [genderId], references: [id])
  genderId String @db.ObjectId
  user     User   @relation(fields: [userId], references: [id])
  userId   String @db.ObjectId

  @@map("user_genres")
}

model Gender {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  gender       String
  UserGenres   UserGender[]
  GenderAuthor GenderAuthor[]
  Book         Book[]

  @@map("genres")
}

model Thought {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bookId    String   @db.ObjectId
  book      Book     @relation(fields: [bookId], references: [id])

  @@map("thougts")
}

model GenderAuthor {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  gender   Gender @relation(fields: [genderId], references: [id])
  genderId String @db.ObjectId
  author   Author @relation(fields: [authorId], references: [id])
  authorId String @db.ObjectId

  @@map("gender_author")
}

model Author {
  id                String         @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  imageUrl          String
  carrerDescription String
  birthplace        String
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  Genders           GenderAuthor[]
  Users             UserAuthor[]

  @@map("authors")
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  bookGrade Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  book      Book     @relation(fields: [bookId], references: [id])
  bookId    String   @db.ObjectId

  @@map("comments")
}

model Book {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  synopsis          String
  imageUrl          String
  totalGrade        Float?
  counterGrade      Int
  AvgGrade          Float
  publishingCompany String
  publishYear       Int
  gender            Gender     @relation(fields: [genderId], references: [id])
  genderId          String     @db.ObjectId
  UserBook          UserBook[]
  Thought           Thought[]
  Comment           Comment[]

  @@map("books")
}
